name: Build

on:
  push:
    branches: [main]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        id: cache-venv
        with:
          path: ./.venv/
          key: ${{ runner.os }}-venv-${{ hashFiles('**/Pipfile') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install venv manager
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: Install dependencies
        run: |
          mkdir .venv
          PIPENV_VENV_IN_PROJECT=1 pipenv install --dev --skip-lock
        if: steps.cache-venv.outputs.cache-hit != 'true'
      - name: Analysing the code with pylint
        run: |
          pipenv run pylint --fail-under=7 src
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        id: cache-venv
        with:
          path: ./.venv/
          key: ${{ runner.os }}-venv-${{ hashFiles('**/Pipfile') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Set up DVC
        uses: iterative/setup-dvc@v1

      - name: Pull trained model
        run: |
          export GDRIVE_CREDENTIALS_DATA='${{ secrets.GDRIVE_CREDENTIALS_DATA }}'
          dvc pull train
      - name: Install venv manager
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: Install dependencies
        run: |
          mkdir .venv
          PIPENV_VENV_IN_PROJECT=1 pipenv install --dev --skip-lock
        if: steps.cache-venv.outputs.cache-hit != 'true'
      - name: Testing the code with pytest
        run: |
          pipenv run pytest  --cache-clear --cov=src.app tests >pytest-coverage.txt
      - name: Comment coverage
        uses: coroo/pytest-coverage-commentator@v1.0.2
        if: github.event_name == 'pull_request'

  build-backend:
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up DVC
        uses: iterative/setup-dvc@v1

      - name: Pull trained model
        run: |
          export GDRIVE_CREDENTIALS_DATA='${{ secrets.GDRIVE_CREDENTIALS_DATA }}'
          dvc pull train
        
      - name: Add version to __init__.py
        run: |
          branch=`git rev-parse --abbrev-ref HEAD`
          hash=`git rev-parse --short HEAD`
          sed -i "s/__version__ = '.*'/__version__ = '$branch-$hash'/" src/app/__init__.py

      - name: Build backend image and push to registry
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: espositoandrea/memento-backend
          directory: ./
          registry: docker.io
          addLatest: true
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  build-frontend:
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up DVC
        uses: iterative/setup-dvc@v1

      - name: Add version to footer
        run: |
          branch=`git rev-parse --abbrev-ref HEAD`
          hash=`git rev-parse --short HEAD`
          sed -i "s/__VERSION__/$branch-$hash/" frontend/*.html


      - name: Build frontend image and push to registry
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: espositoandrea/memento-frontend
          directory: ./frontend
          registry: docker.io
          addLatest: true
          dockerfile: ./frontend/Dockerfile
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
