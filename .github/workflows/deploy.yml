name: Deploy
on:
  push:
    branches: [main]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
env:
  azure_namespace: memento
jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        id: cache-venv
        with:
          path: ./.venv/
          key: ${{ runner.os }}-venv-${{ hashFiles('**/Pipfile') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install venv manager
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: Install dependencies
        run: |
          mkdir .venv
          PIPENV_VENV_IN_PROJECT=1 pipenv install --dev --skip-lock
        if: steps.cache-venv.outputs.cache-hit != 'true'
      - name: Analysing the code with pylint
        run: |
          pipenv run pylint --fail-under=7 src
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        id: cache-venv
        with:
          path: ./.venv/
          key: ${{ runner.os }}-venv-${{ hashFiles('**/Pipfile') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Set up DVC
        uses: iterative/setup-dvc@v1

      - name: Pull trained model
        run: |
          export GDRIVE_CREDENTIALS_DATA='${{ secrets.GDRIVE_CREDENTIALS_DATA }}'
          dvc pull train
      - name: Install venv manager
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: Install dependencies
        run: |
          mkdir .venv
          PIPENV_VENV_IN_PROJECT=1 pipenv install --dev --skip-lock
        if: steps.cache-venv.outputs.cache-hit != 'true'
      - name: Testing the code with pytest
        run: |
          pipenv run pytest  --cache-clear --cov=src.app tests >pytest-coverage.txt
      - name: Comment coverage
        uses: coroo/pytest-coverage-commentator@v1.0.2
        if: github.event_name == 'pull_request'

  build-and-deploy-backend:
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - uses: actions/checkout@master

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create ACR
        id: create-acr
        run: |
          az acr create -n SE4AIRegistry -g SE4AIRegistry9770-rg --location "West Europe" --sku Basic --admin-enabled
          echo "::set-output name=acr_username::`az acr credential show -n SE4AIRegistry --query username | xargs`"
          echo "::set-output name=acr_password::`az acr credential show -n SE4AIRegistry --query passwords[0].value | xargs`"
          echo "::add-mask::`az acr credential show -n SE4AIRegistry --query passwords[0].value | xargs`"

      - uses: azure/docker-login@v1
        with:
          login-server: se4airegistry.azurecr.io
          username: ${{ steps.create-acr.outputs.acr_username }}
          password: ${{ steps.create-acr.outputs.acr_password }}

      - name: Set up DVC
        uses: iterative/setup-dvc@v1

      - name: Pull trained model
        run: |
          export GDRIVE_CREDENTIALS_DATA='${{ secrets.GDRIVE_CREDENTIALS_DATA }}'
          dvc pull train

      - name: Add version to __init__.py
        run: |
          hash=`git rev-parse --short HEAD`
          sed -i "s/__version__ = '.*'/__version__ = '$hash'/" src/app/__init__.py

      - name: Build and push image to ACR
        id: build-image
        run: |
          docker build "$GITHUB_WORKSPACE/" -f  "Dockerfile" -t se4airegistry.azurecr.io/memento-backend:${{ github.sha }} --label dockerfile-path=Dockerfile
          docker push se4airegistry.azurecr.io/memento-backend:${{ github.sha }}

      - uses: azure/k8s-set-context@v1
        id: login
        with:
          kubeconfig: ${{ secrets.aks_se4aicluster_kubeConfig }}

      - name: Create namespace
        run: |
          namespacePresent=`kubectl get namespace | grep ${{ env.azure_namespace }} | wc -l`
          if [ $namespacePresent -eq 0 ]
          then
              echo `kubectl create namespace ${{ env.azure_namespace }}`
          fi

      - uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ env.azure_namespace }}
          container-registry-url: se4airegistry.azurecr.io
          container-registry-username: ${{ steps.create-acr.outputs.acr_username }}
          container-registry-password: ${{ steps.create-acr.outputs.acr_password }}
          secret-name: se4aiclusterdockerauth

      - uses: azure/k8s-deploy@v1.2
        with:
          namespace: ${{ env.azure_namespace }}
          manifests: |
            kubernetes/backend.yml
          images: |
            se4airegistry.azurecr.io/memento-backend:${{ github.sha }}
          imagepullsecrets: |
            se4aiclusterdockerauth

  build-and-deploy-frontend:
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - uses: actions/checkout@master

      - uses: azure/docker-login@v1
        with:
          login-server: se4airegistry.azurecr.io
          username: ${{ secrets.acr_se4airegistry_username }}
          password: ${{ secrets.acr_se4airegistry_password }}
      
      - name: Add version to footer
        run: |
          hash=`git rev-parse --short HEAD`
          sed -i "s/__VERSION__/$hash/" frontend/*.html

      - name: Build and push image to ACR
        id: build-image
        run: |
          docker build "$GITHUB_WORKSPACE/frontend" -f  "frontend/Dockerfile" -t se4airegistry.azurecr.io/memento-frontend:${{ github.sha }} --label dockerfile-path=frontend/Dockerfile
          docker push se4airegistry.azurecr.io/memento-frontend:${{ github.sha }}

      - uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.aks_se4aicluster_kubeConfig }}
        id: login

      - name: Create namespace
        run: |
          namespacePresent=`kubectl get namespace | grep ${{ env.azure_namespace }} | wc -l`
          if [ $namespacePresent -eq 0 ]
          then
              echo `kubectl create namespace ${{ env.azure_namespace }}`
          fi

      - uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ env.azure_namespace }}
          container-registry-url: se4airegistry.azurecr.io
          container-registry-username: ${{ secrets.acr_se4airegistry_username }}
          container-registry-password: ${{ secrets.acr_se4airegistry_password }}
          secret-name: se4aiclusterdockerauth

      - uses: azure/k8s-deploy@v1.2
        with:
          namespace: ${{ env.azure_namespace }}
          manifests: |
            kubernetes/frontend.yml
          images: |
            se4airegistry.azurecr.io/memento-frontend:${{ github.sha }}
          imagepullsecrets: |
            se4aiclusterdockerauth
